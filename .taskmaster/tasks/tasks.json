{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "PHASE 0: Set up Database Schema with RLS from Day One",
        "description": "Initialize Supabase database with complete schema including multi-tenancy support AND row-level security policies as core principle",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Create all database tables with RLS policies enforced from the start. Every table MUST have RLS policies before any data insertion.",
        "dependencies": [],
        "testStrategy": "Verify RLS policies block unauthorized access, test that no table allows public access, validate foreign keys and constraints",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Supabase project and configure environment",
            "description": "Set up Supabase project, configure environment variables, establish connection",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create core multi-tenancy tables with RLS",
            "description": "owner_accounts, owner_organizations, organizations with strict RLS policies",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Create user and permission tables with RLS",
            "description": "users, roles, permissions, role_permissions, cross_org_staff_assignments",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create generic tagging system tables",
            "description": "tags (id, name, type, org_id), taggables (tag_id, taggable_id, taggable_type) for flexible tagging of employees, tours, classes",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create event tables with tour metadata support",
            "description": "events, event_templates, event_bookings with tour_type and lead_source fields",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "Create membership and subscription tables",
            "description": "subscriptions, memberships with multi-location support and RLS",
            "status": "pending"
          },
          {
            "id": 7,
            "title": "Create notification tables for in-app notifications",
            "description": "notifications table with read_at timestamp, user_id, type, payload",
            "status": "pending"
          },
          {
            "id": 8,
            "title": "Create supporting tables",
            "description": "workouts, transactions, client_segments, audit_log, waivers, onboarding_sessions",
            "status": "pending"
          },
          {
            "id": 9,
            "title": "Create indexes and constraints",
            "description": "Add all foreign keys, unique constraints, and performance indexes",
            "status": "pending"
          },
          {
            "id": 10,
            "title": "Document RLS policies",
            "description": "Create comprehensive documentation of all RLS policies per table",
            "status": "pending"
          }
        ]
      },
      {
        "id": 2,
        "title": "PHASE 0: Create Database Backup Strategy",
        "description": "Implement automated database backup and recovery procedures BEFORE any data goes in",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Set up automated Supabase backups, create point-in-time recovery procedures, implement data export functionality, document and TEST recovery procedures.",
        "dependencies": [
          "1"
        ],
        "testStrategy": "Actually perform a backup and restore to verify it works, test data integrity after restore",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Supabase automatic backups",
            "description": "Enable daily automated backups in Supabase dashboard",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create manual backup scripts",
            "description": "Scripts for on-demand full database exports using pg_dump",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Implement point-in-time recovery procedures",
            "description": "Document and test PITR recovery process",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create data export API endpoints",
            "description": "Endpoints for GDPR compliance - export user data on request",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Test complete restore process",
            "description": "Actually restore from backup and verify data integrity",
            "status": "pending"
          }
        ]
      },
      {
        "id": 3,
        "title": "PHASE 0: Implement Error Handling Framework",
        "description": "Create consistent error handling and logging - you can't debug what you can't see",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Create custom error classes, implement error middleware, add error logging with Sentry, ensure consistent error response format, add request ID tracking.",
        "dependencies": [],
        "testStrategy": "Test error responses for various scenarios, verify error logging captures all details, validate error format consistency",
        "subtasks": [
          {
            "id": 1,
            "title": "Create custom error classes",
            "description": "AppError, ValidationError, AuthError, PermissionError, NotFoundError",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement error middleware",
            "description": "Global error handler that catches all errors and formats responses",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Set up Sentry integration",
            "description": "Configure Sentry for error tracking with proper environment separation",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Implement request ID tracking",
            "description": "Add unique request IDs to all requests for tracing",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create error response standards",
            "description": "Consistent JSON error format with code, message, details",
            "status": "pending"
          }
        ]
      },
      {
        "id": 4,
        "title": "PHASE 0: Implement Data Validation Framework",
        "description": "Create comprehensive input validation - prevent injection and bad data at entry point",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Implement validation middleware using Zod, create reusable validation schemas, add request sanitization, implement type checking.",
        "dependencies": [
          "3"
        ],
        "testStrategy": "Test SQL injection attempts, test XSS attempts, verify all invalid inputs are rejected with proper errors",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up Zod validation library",
            "description": "Install and configure Zod for TypeScript runtime validation",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create validation middleware",
            "description": "Middleware that validates request body, params, and query",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Build reusable validation schemas",
            "description": "Common schemas for email, phone, UUID, organization context",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Implement sanitization helpers",
            "description": "HTML stripping, SQL escape, trim whitespace",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create type generation from schemas",
            "description": "Auto-generate TypeScript types from Zod schemas",
            "status": "pending"
          }
        ]
      },
      {
        "id": 5,
        "title": "PHASE 0: Implement WorkOS Authentication Integration",
        "description": "Set up WorkOS for enterprise SSO - the gateway to the entire system",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Configure WorkOS SDK, implement authentication endpoints with proper error handling, set up JWT token management with organization context.",
        "dependencies": [
          "1",
          "3",
          "4"
        ],
        "testStrategy": "Test login/logout flows, test invalid credentials, verify JWT contains org context, test token expiration and refresh",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure WorkOS SDK",
            "description": "Install SDK, set up API keys, configure webhooks",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create authentication endpoints",
            "description": "POST /auth/login, POST /auth/logout, POST /auth/refresh",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Implement JWT token management",
            "description": "Token generation with org context, secure storage, rotation",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create organization switcher endpoint",
            "description": "POST /auth/switch-organization - validates permission and returns new JWT",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Integrate with Supabase sessions",
            "description": "Store sessions in Supabase for persistence",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "Implement refresh token flow",
            "description": "Secure refresh token rotation with blacklisting",
            "status": "pending"
          }
        ]
      },
      {
        "id": 6,
        "title": "PHASE 0: Implement Permission System",
        "description": "Create role-based permission system - no endpoint should exist without permission checks",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Implement permission middleware that runs on EVERY request, create default roles, implement permission checking at API level.",
        "dependencies": [
          "1",
          "5"
        ],
        "testStrategy": "Test unauthorized access is blocked, test each role's permissions, verify cross-org isolation",
        "subtasks": [
          {
            "id": 1,
            "title": "Create permission middleware",
            "description": "Middleware that checks permissions on every request",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Define permission structure",
            "description": "Resource-based permissions (events.create, clients.view, etc.)",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Create default roles",
            "description": "Owner, Admin, Trainer, Front Desk with predefined permissions",
            "status": "done"
          },
          {
            "id": 4,
            "title": "Implement organization context checks",
            "description": "Ensure users can only access their organization's data",
            "status": "done"
          },
          {
            "id": 5,
            "title": "Build permission management endpoints",
            "description": "APIs to manage roles and permissions",
            "status": "done"
          }
        ]
      },
      {
        "id": 7,
        "title": "PHASE 0: Implement Security and Compliance Framework",
        "description": "Layer security headers, rate limiting, CORS, audit logging on top of secure auth/permission base",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Implement helmet.js for security headers, set up rate limiting with Redis, configure CORS, implement audit logging.",
        "dependencies": [
          "1",
          "5",
          "6"
        ],
        "testStrategy": "Run OWASP security scan, test rate limiting blocks abuse, verify audit logs capture all admin actions",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure helmet.js security headers",
            "description": "CSP, HSTS, X-Frame-Options, etc.",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement rate limiting with Redis",
            "description": "Per-user and per-IP rate limiting",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Set up CORS configuration",
            "description": "Whitelist specific frontend domains only",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create audit logging system",
            "description": "Log all state changes with actor, action, target",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Implement GDPR/CCPA endpoints",
            "description": "Data export and deletion endpoints",
            "status": "pending"
          }
        ]
      },
      {
        "id": 8,
        "title": "PHASE 0: Create CI/CD Pipeline",
        "description": "Set up automated testing and deployment - nothing gets deployed without passing tests",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Configure GitHub Actions for CI/CD, set up linting, testing, and deployment workflows.",
        "dependencies": [],
        "testStrategy": "Verify pipeline blocks PRs with failing tests, ensure security scans run",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up GitHub Actions workflow",
            "description": "Create .github/workflows for CI/CD",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Configure ESLint and Prettier",
            "description": "Linting and formatting rules",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Set up TypeScript strict mode",
            "description": "Enable all strict checks",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create test automation",
            "description": "Run tests on every PR",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Implement deployment workflows",
            "description": "Staging auto-deploy, production manual approval",
            "status": "pending"
          }
        ]
      },
      {
        "id": 9,
        "title": "PHASE 0: Implement Testing Framework",
        "description": "Set up comprehensive testing infrastructure - now that we have something secure to test",
        "priority": "critical",
        "status": "pending",
        "phase": "0-secure-bedrock",
        "details": "Configure Jest for unit tests, set up Supertest for integration tests, create test utilities.",
        "dependencies": [
          "1",
          "5",
          "6"
        ],
        "testStrategy": "Ensure tests cover all security scenarios, verify mocks don't bypass real security",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Jest and test environment",
            "description": "Set up Jest with TypeScript support",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Set up Supertest for API testing",
            "description": "Integration test setup",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Create test database strategy",
            "description": "Isolated test database with migrations",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Build auth test utilities",
            "description": "Helpers for mocking authenticated requests",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Set up coverage reporting",
            "description": "80% minimum coverage enforcement",
            "status": "pending"
          }
        ]
      },
      {
        "id": 10,
        "title": "PHASE 1: Create Multi-Step Onboarding System",
        "description": "First complex feature - implement stateful onboarding with all security measures",
        "priority": "high",
        "status": "pending",
        "phase": "1-vertical-slice",
        "details": "Create onboarding session management with encryption, implement state persistence with proper validation.",
        "dependencies": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9"
        ],
        "testStrategy": "Test complete flow with security checks at each step, verify session hijacking is prevented",
        "subtasks": [
          {
            "id": 1,
            "title": "Create onboarding session management",
            "description": "Session creation, storage, expiration",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement state persistence",
            "description": "Save progress between steps securely",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Build recovery flows",
            "description": "Handle browser close, expired sessions",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create cleanup jobs",
            "description": "Remove orphaned sessions after 24 hours",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Integrate with owner/org creation",
            "description": "Connect to organization creation flow",
            "status": "pending"
          }
        ]
      },
      {
        "id": 11,
        "title": "PHASE 1: Create Organization Management Module",
        "description": "Implement organization creation for onboarding - with full security and audit trail",
        "priority": "high",
        "status": "done",
        "phase": "1-vertical-slice",
        "details": "Create organization creation endpoint with full validation, implement parent-child relationships.",
        "dependencies": [
          "10"
        ],
        "testStrategy": "Test organization creation with invalid data, verify data isolation between orgs",
        "subtasks": [
          {
            "id": 1,
            "title": "Create organization CRUD endpoints",
            "description": "POST, GET, PUT, DELETE /organizations",
            "status": "done"
          },
          {
            "id": 2,
            "title": "Implement franchise hierarchy",
            "description": "Parent-child org relationships",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Build settings management",
            "description": "Organization-specific configurations",
            "status": "done"
          },
          {
            "id": 4,
            "title": "Add audit trail",
            "description": "Log all organization changes",
            "status": "done"
          },
          {
            "id": 5,
            "title": "Create org switching logic",
            "description": "Secure context switching between orgs",
            "status": "done"
          }
        ]
      },
      {
        "id": 12,
        "title": "PHASE 1: Implement User/Client Management (Read Only)",
        "description": "Create secure endpoint to list clients - proves API contract for frontend",
        "priority": "high",
        "status": "pending",
        "phase": "1-vertical-slice",
        "details": "Implement GET endpoint for clients with full permission checks, ensure organization isolation.",
        "dependencies": [
          "11"
        ],
        "testStrategy": "Test unauthorized access is blocked, verify org isolation",
        "subtasks": [
          {
            "id": 1,
            "title": "Create GET /clients endpoint",
            "description": "List clients with pagination",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement organization filtering",
            "description": "Ensure data isolation",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add search and filters",
            "description": "Name, email, status filters",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create response DTOs",
            "description": "Clean data transfer objects",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Add permission checks",
            "description": "Verify user can view clients",
            "status": "pending"
          }
        ]
      },
      {
        "id": 13,
        "title": "PHASE 1: Create API Documentation",
        "description": "Document the secure endpoints so frontend can start integration",
        "priority": "high",
        "status": "pending",
        "phase": "1-vertical-slice",
        "details": "Set up OpenAPI/Swagger specification, document authentication flow thoroughly.",
        "dependencies": [
          "10",
          "11",
          "12"
        ],
        "testStrategy": "Validate OpenAPI spec, ensure security requirements are clear",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up Swagger/OpenAPI",
            "description": "Configure swagger-ui-express",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Document auth flow",
            "description": "Complete auth documentation",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add security schemas",
            "description": "Document security requirements",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create example requests",
            "description": "Provide working examples",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Build integration guide",
            "description": "Frontend integration guide",
            "status": "pending"
          }
        ]
      },
      {
        "id": 14,
        "title": "PHASE 2: Complete User/Client Management CRUD",
        "description": "Implement full client management with all security measures",
        "priority": "medium",
        "status": "pending",
        "phase": "2-core-features",
        "details": "Implement CREATE, UPDATE, DELETE with validation and audit logging.",
        "dependencies": [
          "12"
        ],
        "testStrategy": "Test all CRUD operations with invalid data, verify audit trail",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement client creation",
            "description": "POST /clients with validation",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Build update endpoints",
            "description": "PUT/PATCH /clients/:id",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add soft delete",
            "description": "DELETE with data retention",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create employee specialty management",
            "description": "API endpoints for attaching/detaching tags to employees",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Implement client segments",
            "description": "Dynamic client grouping",
            "status": "pending"
          }
        ]
      },
      {
        "id": 15,
        "title": "PHASE 2: Implement Membership Management",
        "description": "Create membership system with subscription management and access control",
        "priority": "medium",
        "status": "pending",
        "phase": "2-core-features",
        "details": "Create membership CRUD with full validation, implement access type management.",
        "dependencies": [
          "14",
          "27"
        ],
        "testStrategy": "Test membership state transitions, verify access calculations",
        "subtasks": [
          {
            "id": 1,
            "title": "Create membership endpoints",
            "description": "CRUD for memberships",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement access types",
            "description": "Subscription, day pass, drop-in",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Build multi-location logic",
            "description": "Cross-location access management",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add expiration handling",
            "description": "Automated status updates",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create access verification",
            "description": "Check member access rights",
            "status": "pending"
          }
        ]
      },
      {
        "id": 16,
        "title": "PHASE 2: Create Event Booking System",
        "description": "Implement unified event system with booking management and capacity controls",
        "priority": "medium",
        "status": "pending",
        "phase": "2-core-features",
        "details": "Create event CRUD with validation, implement booking logic with tour metadata support.",
        "dependencies": [
          "14"
        ],
        "testStrategy": "Test race conditions in booking, verify capacity limits enforced",
        "subtasks": [
          {
            "id": 1,
            "title": "Create event management endpoints",
            "description": "CRUD for events with templates",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement tour metadata fields",
            "description": "tour_type (individual/family/group), lead_source (walk-in/website/referral)",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Build booking logic",
            "description": "Atomic capacity management",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create waitlist system",
            "description": "Fair waitlist promotion",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Add attendance tracking",
            "description": "Check-in and no-show handling",
            "status": "pending"
          }
        ]
      },
      {
        "id": 17,
        "title": "PHASE 2: Implement Analytics Module",
        "description": "Create analytics endpoints with proper data access controls",
        "priority": "medium",
        "status": "pending",
        "phase": "2-core-features",
        "details": "Implement revenue analytics with permission checks, create attendance reports.",
        "dependencies": [
          "14",
          "15",
          "16"
        ],
        "testStrategy": "Verify data isolation in reports, test performance with large datasets",
        "subtasks": [
          {
            "id": 1,
            "title": "Create revenue analytics",
            "description": "Revenue reports by location",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Build attendance reports",
            "description": "Class utilization metrics",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Implement client analytics",
            "description": "Client behavior patterns",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add cross-org reporting",
            "description": "Multi-location dashboards",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create export functionality",
            "description": "CSV/PDF report exports",
            "status": "pending"
          }
        ]
      },
      {
        "id": 18,
        "title": "PHASE 2: Create Notification Engine",
        "description": "Implement notification system with user consent and preferences",
        "priority": "medium",
        "status": "pending",
        "phase": "2-core-features",
        "details": "Set up notification templates with sanitization, implement in-app notifications with read/unread status.",
        "dependencies": [
          "14"
        ],
        "testStrategy": "Test opt-out is respected, verify template injection is prevented",
        "subtasks": [
          {
            "id": 1,
            "title": "Create notification templates",
            "description": "Email and push templates",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement in-app notifications",
            "description": "GET /notifications with unread count, POST /notifications/:id/mark-as-read",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Build preference system",
            "description": "User notification preferences",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add delivery tracking",
            "description": "Track notification delivery",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create unsubscribe flow",
            "description": "One-click unsubscribe",
            "status": "pending"
          }
        ]
      },
      {
        "id": 19,
        "title": "PHASE 2: Create Background Job System",
        "description": "Implement async job processing for scheduled tasks with monitoring",
        "priority": "medium",
        "status": "pending",
        "phase": "2-core-features",
        "details": "Set up Bull queue with Redis, implement job authentication and permissions.",
        "dependencies": [
          "1",
          "5",
          "6"
        ],
        "testStrategy": "Test job failures don't compromise security, verify retry logic",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up Bull queue",
            "description": "Configure job queue with Redis",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create job authentication",
            "description": "Secure job execution context",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Build reconciliation jobs",
            "description": "Nightly data consistency checks",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Implement cleanup jobs",
            "description": "Remove orphaned data",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Add job monitoring",
            "description": "Job status and alerting",
            "status": "pending"
          }
        ]
      },
      {
        "id": 20,
        "title": "PHASE 2: Implement Caching Layer",
        "description": "Set up Redis caching without compromising security",
        "priority": "medium",
        "status": "pending",
        "phase": "2-core-features",
        "details": "Configure Redis with authentication, implement caching with proper TTLs.",
        "dependencies": [
          "1",
          "5",
          "6"
        ],
        "testStrategy": "Test cache doesn't leak data across orgs, verify invalidation works",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Redis connection",
            "description": "Set up Redis with auth",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Implement cache middleware",
            "description": "Smart caching layer",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add cache invalidation",
            "description": "Invalidate on updates",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create cache utilities",
            "description": "Helper functions",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Monitor cache performance",
            "description": "Hit/miss ratios",
            "status": "pending"
          }
        ]
      },
      {
        "id": 21,
        "title": "PHASE 2: Create Health Check and Monitoring",
        "description": "Implement health checks that don't expose sensitive information",
        "priority": "medium",
        "status": "pending",
        "phase": "2-core-features",
        "details": "Create health check endpoints with no sensitive data, integrate monitoring.",
        "dependencies": [
          "1",
          "5"
        ],
        "testStrategy": "Verify health endpoints don't leak information",
        "subtasks": [
          {
            "id": 1,
            "title": "Create health endpoints",
            "description": "GET /health, /ready, /live",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Add dependency checks",
            "description": "Database, Redis health",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Integrate monitoring",
            "description": "Datadog/New Relic setup",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create custom metrics",
            "description": "Business metrics",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Set up alerting",
            "description": "Anomaly detection",
            "status": "pending"
          }
        ]
      },
      {
        "id": 22,
        "title": "PHASE 3: Implement Workout Builder Module",
        "description": "Create workout template system with franchise controls",
        "priority": "low",
        "status": "pending",
        "phase": "3-additional-features",
        "details": "Create workout CRUD with ownership validation, implement exercise library.",
        "dependencies": [
          "14"
        ],
        "testStrategy": "Test template access controls, verify franchise restrictions",
        "subtasks": [
          {
            "id": 1,
            "title": "Create workout CRUD",
            "description": "Template management",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Build exercise library",
            "description": "Exercise database",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add franchise templates",
            "description": "Shared templates",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Create logging endpoints",
            "description": "Workout tracking",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Implement PR detection",
            "description": "Personal records",
            "status": "pending"
          }
        ]
      },
      {
        "id": 23,
        "title": "PHASE 3: Create Achievement System",
        "description": "Implement gamification with privacy considerations",
        "priority": "low",
        "status": "pending",
        "phase": "3-additional-features",
        "details": "Define achievement criteria securely, implement achievement evaluation.",
        "dependencies": [
          "14",
          "16"
        ],
        "testStrategy": "Test achievement logic doesn't leak user behavior",
        "subtasks": [
          {
            "id": 1,
            "title": "Define achievement types",
            "description": "Achievement categories",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create evaluation engine",
            "description": "Achievement logic",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Build progress tracking",
            "description": "User progress",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Add awarding system",
            "description": "Achievement grants",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create privacy controls",
            "description": "Opt-in sharing",
            "status": "pending"
          }
        ]
      },
      {
        "id": 24,
        "title": "PHASE 3: Create Admin Tools Module",
        "description": "Implement administrative tools with strict access controls",
        "priority": "low",
        "status": "pending",
        "phase": "3-additional-features",
        "details": "Create impersonation with full audit trail and time limits.",
        "dependencies": [
          "1",
          "5",
          "6",
          "7"
        ],
        "testStrategy": "Test impersonation restrictions, verify audit trail completeness",
        "subtasks": [
          {
            "id": 1,
            "title": "Build impersonation system",
            "description": "Time-limited impersonation",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Create override tools",
            "description": "Manual corrections",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add approval workflows",
            "description": "Multi-step approvals",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Implement audit trail",
            "description": "Immutable logging",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create support dashboard",
            "description": "Admin interface",
            "status": "pending"
          }
        ]
      },
      {
        "id": 25,
        "title": "PHASE 3: Implement Document Management",
        "description": "Create document system with version control and access logging",
        "priority": "low",
        "status": "pending",
        "phase": "3-additional-features",
        "details": "Create document upload with virus scanning, implement waiver signing.",
        "dependencies": [
          "11",
          "14"
        ],
        "testStrategy": "Test file upload security, verify signing audit trail",
        "subtasks": [
          {
            "id": 1,
            "title": "Build upload system",
            "description": "Secure file uploads",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Add virus scanning",
            "description": "Malware protection",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Create signing flow",
            "description": "Digital signatures",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Implement versioning",
            "description": "Document history",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Add access controls",
            "description": "Permission-based access",
            "status": "pending"
          }
        ]
      },
      {
        "id": 26,
        "title": "PHASE 3: Implement Feature Flag System",
        "description": "Create feature flag infrastructure for safe gradual rollouts",
        "priority": "low",
        "status": "pending",
        "phase": "3-additional-features",
        "details": "Implement feature flag evaluation with caching, create management interface.",
        "dependencies": [
          "1",
          "5",
          "6"
        ],
        "testStrategy": "Test flag evaluation performance, verify org isolation",
        "subtasks": [
          {
            "id": 1,
            "title": "Create flag storage",
            "description": "Database schema",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Build evaluation engine",
            "description": "Flag logic",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Add management API",
            "description": "Flag CRUD",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "Implement rollouts",
            "description": "Percentage rollouts",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "Create monitoring",
            "description": "Flag usage metrics",
            "status": "pending"
          }
        ]
      },
      {
        "id": 27,
        "title": "PHASE 1: Implement Kisi Access Control Integration",
        "description": "Create comprehensive Kisi API integration for physical door access management across all organizations",
        "details": "Implement complete Kisi integration including API wrapper service, membership-to-group sync, door unlock endpoints, multi-location access management, nightly reconciliation jobs, and mobile app APIs. Critical foundation for the entire access control system.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          1,
          5,
          6,
          11
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Kisi database schema and configuration",
            "description": "Add kisi_access_log table, organizations.kisi_api_key_encrypted field, kisi_group_mappings table for tracking Kisi groups per organization",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 2,
            "title": "Build Kisi API wrapper service",
            "description": "Create KisiService class with methods: grantAccess, revokeAccess, unlockDoor, createGroup, addToGroup, removeFromGroup, syncGroupMemberships",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 3,
            "title": "Implement membership-to-Kisi sync service",
            "description": "Create service to sync membership status changes to Kisi groups: active → grant access, expired/suspended → revoke access, multi-location → multiple groups",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 4,
            "title": "Create door unlock API endpoints",
            "description": "Build POST /api/door/unlock endpoint with geofence validation, membership verification, rate limiting, and mobile app integration",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 5,
            "title": "Build multi-location access management",
            "description": "Implement cross-location access logic, handle multi-org memberships, sync access across multiple Kisi installations per organization",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 6,
            "title": "Implement nightly Kisi reconciliation jobs",
            "description": "Create scheduled job to sync CRM membership data with Kisi groups, remove orphaned access, grant missing access, handle cross-location consistency",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 7,
            "title": "Create access audit and logging system",
            "description": "Implement comprehensive logging for all Kisi operations: door unlocks, access grants/revokes, failed attempts, with organization context and audit trails",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 8,
            "title": "Integrate Kisi with membership lifecycle events",
            "description": "Connect Kisi sync to membership creation, updates, cancellations, and Stripe webhook events. Ensure real-time access control updates when memberships change.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 9,
            "title": "Implement queued Kisi sync system",
            "description": "Create Redis-based event queue with timestamps/versions to ensure ordered, idempotent processing of membership changes. Single worker processes events sequentially to eliminate race conditions.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 10,
            "title": "Implement comprehensive Kisi error handling and retry logic",
            "description": "Add exponential backoff retry for transient errors (5xx), 3 retry maximum, dead-letter queue for failed operations, graceful degradation when Kisi unavailable, proper error propagation to prevent bad UX.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 11,
            "title": "Build intelligent reconciliation with conflict detection",
            "description": "Create reconciliation that generates reports for discrepancies. Auto-fix clear cases (expired memberships), flag ambiguous cases (manual Kisi grants) for admin review rather than destructive automated action.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 12,
            "title": "Implement outbound Kisi API rate limiting",
            "description": "Add token bucket or request queue to KisiService ensuring all calls respect Kisi's published rate limits (e.g., max 10 req/sec). Handle bulk operations like franchise onboarding gracefully without triggering API bans.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 27
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-31T01:49:15.746Z",
      "updated": "2025-08-07T07:08:32.428Z",
      "description": "Security-first task organization with comprehensive subtasks including mockup-revealed features"
    }
  }
}