import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

describe('Type Generation', () => {
  const generatedDir = path.join(__dirname, '../types/generated');

  beforeAll(() => {
    // Run type generation
    execSync('npm run generate:types', { stdio: 'ignore' });
  });

  it('should create generated types directory', () => {
    expect(fs.existsSync(generatedDir)).toBe(true);
  });

  it('should generate all expected type files', () => {
    const expectedFiles = [
      'index.ts',
      'common.types.ts',
      'user.types.ts',
      'organization.types.ts',
      'membership.types.ts',
      'event.types.ts',
      'workout.types.ts',
      'notification.types.ts',
    ];

    for (const file of expectedFiles) {
      const filePath = path.join(generatedDir, file);
      expect(fs.existsSync(filePath)).toBe(true);
    }
  });

  it('should generate valid TypeScript type exports', () => {
    const userTypesPath = path.join(generatedDir, 'user.types.ts');
    const content = fs.readFileSync(userTypesPath, 'utf-8');

    // Check for proper imports
    expect(content).toContain("import { z } from 'zod'");
    expect(content).toContain("import * as schemas from '../../validation/schemas'");

    // Check for type exports
    expect(content).toContain(
      'export type UserProfile = z.infer<typeof schemas.userProfileSchema>'
    );
    expect(content).toContain('export type CreateUser = z.infer<typeof schemas.createUserSchema>');
    expect(content).toContain('export type UpdateUser = z.infer<typeof schemas.updateUserSchema>');
  });

  it('should include auto-generation header', () => {
    const commonTypesPath = path.join(generatedDir, 'common.types.ts');
    const content = fs.readFileSync(commonTypesPath, 'utf-8');

    expect(content).toContain('Auto-generated TypeScript types from Zod schemas');
    expect(content).toContain('DO NOT EDIT THIS FILE DIRECTLY');
    expect(content).toContain('Edit the schema files in src/validation/schemas instead');
  });

  it('should export enum types correctly', () => {
    const commonTypesPath = path.join(generatedDir, 'common.types.ts');
    const content = fs.readFileSync(commonTypesPath, 'utf-8');

    // Check for enum type exports
    expect(content).toContain('export type UserStatus = z.infer<typeof schemas.userStatusEnum>');
    expect(content).toContain(
      'export type MembershipStatus = z.infer<typeof schemas.membershipStatusEnum>'
    );
    expect(content).toContain('export type Role = z.infer<typeof schemas.roleEnum>');
  });

  it('should create proper barrel export file', () => {
    const indexPath = path.join(generatedDir, 'index.ts');
    const content = fs.readFileSync(indexPath, 'utf-8');

    expect(content).toContain("export * from './common.types'");
    expect(content).toContain("export * from './user.types'");
    expect(content).toContain("export * from './organization.types'");
    expect(content).toContain("export * from './membership.types'");
    expect(content).toContain("export * from './event.types'");
    expect(content).toContain("export * from './workout.types'");
    expect(content).toContain("export * from './notification.types'");
  });

  it('should handle all schema groups', () => {
    const files = fs.readdirSync(generatedDir);
    const typeFiles = files.filter(f => f.endsWith('.types.ts'));

    expect(typeFiles).toHaveLength(7); // 7 type files excluding index.ts
  });
});
